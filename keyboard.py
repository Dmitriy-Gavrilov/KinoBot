from aiogram import types
from aiogram.types import (InlineKeyboardMarkup, InlineKeyboardButton,
                           ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove,
                           CallbackQuery)
from random import choice
from create_bot import bot, dp
from find_film import *
from recommendations import *
from search_by_title import *
from db_functions import *


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –æ–±–ª–æ–∂–∫–∏ —Ñ–∏–ª—å–º–∞
async def save_image(url):
    img = requests.get(url)
    img_file = open('images/image.jpg', 'wb')
    img_file.write(img.content)
    img_file.close()


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–≤—ã–±–æ—Ä –∂–∞–Ω—Ä–∞)
async def create_keyboard(user_id):
    choice = InlineKeyboardMarkup(row_width=2)
    inline_buttons = await get_inline_buttons(user_id)
    inline_keyboard = [InlineKeyboardButton(text=inline_buttons[i][0] + inline_buttons[i][1],
                                            callback_data=f"{i}",
                                            resize_keyboard=True) for i in inline_buttons.keys()]
    inline_keyboard.append(InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="next", resize_keyboard=True))

    for i in inline_keyboard:
        choice.add(i)

    return choice


# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ / —É–¥–∞–ª–µ–Ω–∏–∏ –∂–∞–Ω—Ä–∞
async def update_buttons(param, genre, user_id):
    inline_buttons = await get_inline_buttons(user_id)
    for key in keys:
        if key == genre:
            if param == "append":
                inline_buttons[key][0] = "‚úÖ"
            else:
                inline_buttons[key][0] = ""
            break
    await push_inline_buttons(user_id, inline_buttons)


# –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
async def sort_recommendations(arr):
    arr.reverse()
    d = {}
    arr1 = []
    for i in arr:
        if i[0] not in d:
            d[i[0]] = arr.count(i)
            arr1.append(i)
            arr1 = sorted(arr1, key=lambda x: d[x[0]], reverse=True)
    if len(arr1) > 50:
        arr1 = arr1[:50]
    return arr1


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫

# –ö–æ–º–∞–Ω–¥—ã start –∏ help
@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    user_id = str(message.from_user.id)
    user_name = str(message.from_user.first_name)
    username = str(message.from_user.username)
    date = str(message.date).split()[0]

    await check_user(user_id, user_name, username, date)
    await clean(user_id)

    reply_keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    reply_keyboard.row(KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="\start"),
                       KeyboardButton(text="‚ùì–ü–æ–º–æ—â—å", callback_data="\help"))
    reply_keyboard.row(KeyboardButton(text="üé¨ –ü–æ–¥–±–æ—Ä —Ñ–∏–ª—å–º–∞", callback_data="\\find_film"),
                       KeyboardButton(text="üîù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="\\recommendations"))
    reply_keyboard.add(KeyboardButton(text="üîé –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é", callback_data="\search_film"))

    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                         reply_markup=reply_keyboard)


@dp.message_handler(commands=["help"])
async def help_command(message: types.Message):
    await bot.send_message(message.from_user.id, "–≠—Ç–æ –±–æ—Ç –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞ —Ñ–∏–ª—å–º–æ–≤.\n"
                                                 "üé¨ –ü–æ–¥–±–æ—Ä —Ñ–∏–ª—å–º–∞ - –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç—Å—è —Ñ–∏–ª—å–º—ã –∏–∑ –∂–∞–Ω—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤—ã–±—Ä–∞–Ω—ã"
                                                 " (–µ—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∂–∞–Ω—Ä–∞, —Å—á–∏—Ç–∞–µ—Ç—Å—è —á—Ç–æ –±—ã–ª–∏ –≤—ã–±—Ä–∞–Ω—ã –≤—Å–µ)\n"
                                                 "üîù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ - –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç—Å—è —Ñ–∏–ª—å–º—ã, –ø–æ—Ö–æ–∂–∏–µ –Ω–∞ —Ç–µ, —á—Ç–æ —É–∂–µ –±—ã–ª–∏ –∫–æ–≥–¥–∞-—Ç–æ –æ—Ç–º–µ—á–µ–Ω—ã\n"
                                                 "üîé –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é - –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–ª–∏ –µ–≥–æ —á–∞—Å—Ç—å. –í—ã –ø–æ–ª—É—á–∏—Ç–µ –≤—Å–µ —Ñ–∏–ª—å–º—ã, –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ–¥ —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å")


@dp.message_handler(lambda message: message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def start(message: types.Message):
    await start_command(message)


@dp.message_handler(lambda message: message.text == "‚ùì–ü–æ–º–æ—â—å")
async def help(message: types.Message):
    await help_command(message)


# –†–µ–∂–∏–º—ã –±–æ—Ç–∞
@dp.message_handler(lambda message: message.text == "üé¨ –ü–æ–¥–±–æ—Ä —Ñ–∏–ª—å–º–∞")
async def find_film(message: types.Message):
    await bot.send_message(message.from_user.id,
                           "–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∂–∞–Ω—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–µ–≥–æ–¥–Ω—è",
                           reply_markup=await create_keyboard(message.from_user.id))


@dp.message_handler(lambda message: message.text == "üîù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
async def recommendations(message: types.Message):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton(text="–û—á–∏—Å—Ç–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã", callback_data="clear_fav_films", resize_keyboard=True))
    keyboard.add(
        InlineKeyboardButton(text="–ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º", callback_data="show_recommendations", resize_keyboard=True))

    await bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=keyboard)


@dp.message_handler(lambda message: message.text == "üîé –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é")
async def search_film(message: types.Message):
    await push_flag_search(message.from_user.id, 1)
    await bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞")


# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∏–ª—å–º–∞
async def send_film(user_id, msg_id, answer, cb_data_no, cb_data_yes):
    yes_or_no = InlineKeyboardMarkup(row_width=2)
    yes_or_no.row(InlineKeyboardButton(text="‚úÖ", callback_data=f"{cb_data_yes}", resize_keyboard=True),
                  InlineKeyboardButton(text="‚ùå", callback_data=f"{cb_data_no}", resize_keyboard=True))
    if len(answer) > 1:
        text = f"‚ÅÉ {answer[0]}\n‚ÅÉ {answer[1]}\n‚ÅÉ –†–µ–π—Ç–∏–Ω–≥ KP: {answer[2]}"
    else:
        return False
    try:
        if cb_data_no != "no_s":
            await bot.delete_message(chat_id=user_id, message_id=msg_id)
    except:
        pass
    try:
        await save_image(answer[9])
        await bot.send_photo(chat_id=user_id,
                             photo=types.InputFile("images/image.jpg"),
                             caption=text,
                             reply_markup=yes_or_no)
        return True
    except:
        return False
    # await call.answer()


# –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ—á–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤
@dp.callback_query_handler(text="clear_fav_films")
async def clear_fav_films(call: CallbackQuery):
    await clear_favorites_films(call.from_user.id)
    await bot.send_message(call.from_user.id, "–û—Ç–º–µ—á–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç")
    await call.answer()


# –ü–æ–¥–±–æ—Ä –∏ –ø–æ–∫–∞–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤
@dp.callback_query_handler(text="show_recommendations")
async def show_recommendations(call: CallbackQuery):
    fav_films = [int(i) for i in await get_favorites_films(call.from_user.id)]
    if fav_films:
        sm = [i for i in await find_similar_movies(fav_films) if i not in fav_films]
        if not sm:
            await bot.send_message(call.from_user.id,
                                   "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≤–∞—Å –µ—â–µ –Ω–µ —Å–æ–±—Ä–∞–Ω—ã, –æ—Ç–º–µ—á–∞–π—Ç–µ –±–æ–ª—å—à–µ —Ñ–∏–ª—å–º–æ–≤")
            return
        similar_movies = [";;".join(i) for i in await sort_recommendations(await get_movies_by_id(sm))]

        await push_similar_films(call.from_user.id, similar_movies)
        await no_r(call)
    else:
        await bot.send_message(call.from_user.id,
                               "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–º–µ—Ç–∏—Ç—å —Ö–æ—Ç—è –±—ã 1 —Ñ–∏–ª—å–º, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    await call.answer()


# –ü–æ–¥–±–æ—Ä –∏ –ø–æ–∫–∞–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ –∑–∞–ø—Ä–æ—Å—É —Ñ–∏–ª—å–º–æ–≤
@dp.callback_query_handler(text="show_recommendations")
async def show_found_films(call: CallbackQuery, text):
    movies_ids = await search_film_by_title(text)
    if movies_ids:
        movies = await get_movies_by_id(movies_ids)
        if movies:
            movies = [";;".join(i) for i in movies]
            await push_found_films(call.from_user.id, movies)
            await no_s(call)
        else:
            await bot.send_message(call.from_user.id, "–ù–µ –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ñ–∏–ª—å–º—ã —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º")
    else:
        await bot.send_message(call.from_user.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞")

    # await call.answer()


# –ö–Ω–æ–ø–∫–∞ - –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É —Ñ–∏–ª—å–º–æ–≤
@dp.callback_query_handler(text="next")
async def next_step(call: CallbackQuery):
    # await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)

    await call.message.answer("–í—ã–±–µ—Ä–∏ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è —Ñ–∏–ª—å–º")
    await no(call)
    await call.answer()


# –û—Ç–º–µ—Ç–∏—Ç—å —Ñ–∏–ª—å–º
@dp.callback_query_handler(text=["yes", "yes_r", "yes_s"])
async def yes(call: CallbackQuery):
    answer = await get_current_film(call.from_user.id)
    film_id = answer[10]
    fav_films = await get_favorites_films(call.from_user.id)
    if film_id not in fav_films:
        fav_films.append(film_id)
        await push_favorites_films(call.from_user.id, fav_films[:50])  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ [:50]

    if call.data == "yes":
        cb_data = "no"
    elif call.data == "yes_r":
        cb_data = "no_r"
    else:
        cb_data = "no_s"

    keyboard = InlineKeyboardMarkup(row_width=3)
    keyboard.add(InlineKeyboardButton(text="–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∏–ª—å–º", callback_data="get_film_url", resize_keyboard=True))
    keyboard.add(InlineKeyboardButton(text="–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="get_description", resize_keyboard=True))
    keyboard.add(InlineKeyboardButton(text="–¢—Ä–µ–π–ª–µ—Ä", callback_data="get_trailer_url", resize_keyboard=True))
    keyboard.add(InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π —Ñ–∏–ª—å–º", callback_data=f"{cb_data}", resize_keyboard=True))

    await call.message.answer("–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!", reply_markup=keyboard)
    await call.answer()


# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ
@dp.callback_query_handler(text="get_film_url")
async def get_film_url(call: CallbackQuery):
    answer = await get_current_film(call.from_user.id)
    await call.message.answer(f"{answer[3]}")
    await call.answer()


@dp.callback_query_handler(text="get_description")
async def get_description(call: CallbackQuery):
    answer = await get_current_film(call.from_user.id)
    await call.message.answer(f"‚Ä¢ –î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞: {answer[5]}\n"
                              f"‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {answer[6]} –º–∏–Ω\n"
                              f"‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: {answer[7]}+\n"
                              f"‚Ä¢ –ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {answer[4]}")
    await call.answer()


@dp.callback_query_handler(text="get_trailer_url")
async def get_trailer_url(call: CallbackQuery):
    answer = await get_current_film(call.from_user.id)
    await call.message.answer(f"{answer[8]}")
    await call.answer()


# –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–∏–ª—å–º
@dp.callback_query_handler(text="no")
async def no(call: CallbackQuery):
    selected_genres = await get_selected_genres(call.from_user.id)
    if not selected_genres:
        selected_genres = [i for i in keys]
    await push_current_film(call.from_user.id, await handle_response(
        await get_films_by_genre(Genres[choice(selected_genres)]), 0))
    answer = await get_current_film(call.from_user.id)
    # print(answer)

    ans = await send_film(call.from_user.id, call.message.message_id, answer, "no", "yes")
    if not ans:
        await no(call)

    await call.answer()


@dp.callback_query_handler(text="no_r")
async def no_r(call: CallbackQuery):
    movies = await get_similar_films(call.from_user.id)
    if movies[0][0]:
        movie = movies[0]
        # print(movie)
        await push_similar_films(call.from_user.id, [";;".join(i) for i in movies[1:]])
        await push_current_film(call.from_user.id, movie)

        if type(call) == CallbackQuery:
            msg_id = call.message.message_id
        else:
            msg_id = call.message_id
        ans = await send_film(call.from_user.id, msg_id, movie, "no_r", "yes_r")

        if not ans:
            await no_r(call)

    else:
        await bot.send_message(call.from_user.id,
                               "–ù–∞ —ç—Ç–æ–º –≤—Å–µ :(\n"
                               "–ß—Ç–æ–±—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å —Ç–æ—á–Ω–µ–µ, –∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ –±—ã–ª–æ –±–æ–ª—å—à–µ,"
                               " –æ—Ç–º–µ—á–∞–π—Ç–µ –±–æ–ª—å—à–µ —Ñ–∏–ª—å–º–æ–≤")


@dp.callback_query_handler(text="no_s")
async def no_s(call: CallbackQuery):
    await push_flag_search(call.from_user.id, 0)
    movies = await get_found_films(call.from_user.id)
    if movies[0][0]:
        movie = movies[0]
        await push_found_films(call.from_user.id, [";;".join(i) for i in movies[1:]])
        await push_current_film(call.from_user.id, movie)

        if type(call) == CallbackQuery:
            msg_id = call.message.message_id
        else:
            msg_id = call.message_id

        ans = await send_film(call.from_user.id, msg_id, movie, "no_s", "yes_s")

        if not ans:
            await no_r(call)
    else:
        await bot.send_message(call.from_user.id, "–ë–æ–ª—å—à–µ –Ω–µ—Ç —Ñ–∏–ª—å–º–æ–≤, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–¥ —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ")


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Å –∂–∞–Ω—Ä–∞–º–∏
async def edit_message(call: CallbackQuery, param, genre, user_id):
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await update_buttons(param, genre, user_id)
    await bot.send_message(call.from_user.id,
                           "–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∂–∞–Ω—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–µ–≥–æ–¥–Ω—è",
                           reply_markup=await create_keyboard(call.from_user.id))


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –∂–∞–Ω—Ä–æ–≤
@dp.callback_query_handler(text=keys)
async def add_film(call: CallbackQuery):
    user_id = call.from_user.id
    selected_genres = await get_selected_genres(user_id)
    for i in keys:
        if i == call.data:
            if i not in selected_genres:
                selected_genres.append(i)
                param = "append"
            else:
                del selected_genres[selected_genres.index(i)]
                param = "delete"
    await push_selected_genres(user_id, selected_genres)
    await edit_message(call, param, call.data, user_id)
    await call.answer()


# –í—Å–µ–≥–¥–∞ –≤–Ω–∏–∑—É:
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler()
async def other_messages(message: types.Message):
    if await get_flag_search(message.from_user.id):
        await show_found_films(message, message.text)
    else:
        await bot.send_message(message.from_user.id, "–Ø –Ω–µ —Ä–µ–∞–≥–∏—Ä—É—é –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è")
        # await bot.send_sticker(message.from_user.id,
        #                        sticker="CAACAgIAAxkBAAEB-CRlU3YpsjgJPT6Kedby3RTfV-nzSwACARUAAqyhAAFIx5Tw3fxIQ-MzBA")